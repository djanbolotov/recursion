{"version":3,"sources":["graphQL/graphQL.js","utils/functions.js","components/RenderChild.jsx","components/Loader.jsx","components/NavBar.jsx","App.jsx","index.js"],"names":["query","gql","hasArray","data","key","Array","isArray","RenderChild","isMainParent","closeParent","useState","show","setShow","child","setChild","className","onClick","hasChild","length","name","code","map","children","Loader","Navbar","target","href","App","useQuery","loading","continents","continent","client","ApolloClient","link","HttpLink","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"+OAEaA,EAAQC,YAAH,wc,QCFLC,EAAW,SAACC,GACvB,IAAK,IAAIC,KAAOD,EACd,GAAIE,MAAMC,QAAQH,EAAKC,IACrB,OAAOD,EAAKC,GAGhB,MAAO,I,OCFM,SAASG,EAAT,GAIX,IAHFJ,EAGC,EAHDA,KAGC,IAFDK,oBAEC,SADDC,EACC,EADDA,YAEA,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KAYA,OACE,sBAAKC,UAAU,QAAf,UACE,qBAAKC,QAZe,WACtB,IAAMC,EAAWf,EAASC,GAAMe,OAChCJ,EAASZ,EAASC,IACbc,GAAaT,EAGhBI,GAASD,GAFTF,GAAY,IAQZ,SACGN,EAAKgB,MAD4BhB,EAAKiB,MAGxCT,GACCE,EAAMQ,KAAI,SAACC,GAAD,OACR,cAACf,EAAD,CACEE,YAAaD,EAAeI,EAAUH,EAEtCN,KAAMmB,GADDA,EAASF,YC3BXG,MAJf,WACE,OAAO,oBAAIR,UAAU,OAAd,yBCaMS,EAZA,WACb,OACE,sBAAKT,UAAU,SAAf,UACE,oBAAGA,UAAU,OAAOU,OAAO,IAAIC,KAAK,KAApC,iBAA6C,8CAC7C,sBAAKX,UAAU,OAAf,UACE,mBAAGA,UAAU,WAAWU,OAAO,IAAIC,KAAK,mCAAxC,sBACA,mBAAGX,UAAU,WAAWU,OAAO,IAAIC,KAAK,6BAAxC,gCCwBOC,MAzBf,WACE,MAA0BC,YAAS5B,GAA3B6B,EAAR,EAAQA,QAAS1B,EAAjB,EAAiBA,KAEjB,OAAI0B,EACK,cAAC,EAAD,IAIP,gCACE,cAAC,EAAD,IACA,qBAAKd,UAAU,YAAf,SACGZ,EAAK2B,WAAWT,KAAI,SAACU,GACpB,OACE,cAACxB,EAAD,CACEC,cAAc,EAEdL,KAAM4B,GADDA,EAAUX,eCfvBY,G,MAAS,IAAIC,IAAa,CAC9BC,KAAM,IAAIC,IAAS,CACjBC,IAAK,wCAEPC,MAAO,IAAIC,OAGbC,IAASC,OACP,cAACC,EAAA,EAAD,CAAgBT,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEFU,SAASC,eAAe,W","file":"static/js/main.14e79b2d.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\r\n\r\nexport const query = gql`{\r\n    continents {\r\n      code\r\n      name\r\n      countries {\r\n        code\r\n        name\r\n        native\r\n        phone\r\n        continent {\r\n          code\r\n          name\r\n        }\r\n        capital\r\n        currency\r\n        languages {\r\n          code\r\n          name\r\n          native\r\n          rtl\r\n        }\r\n        emoji\r\n        emojiU\r\n        states {\r\n          code\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }`","export const hasArray = (data) => {\n  for (let key in data) {\n    if (Array.isArray(data[key])) {\n      return data[key];\n    }\n  }\n  return [];\n};\n","import React, { useState } from \"react\";\r\n\r\nimport { hasArray } from \"../utils/functions\";\r\n\r\nexport default function RenderChild({\r\n  data,\r\n  isMainParent = false,\r\n  closeParent,\r\n}) {\r\n  const [show, setShow] = useState(false);\r\n  const [child, setChild] = useState([]);\r\n\r\n  const ShowAndGetChild = () => {\r\n    const hasChild = hasArray(data).length;\r\n    setChild(hasArray(data));\r\n    if (!hasChild && !isMainParent) {\r\n      closeParent(false);\r\n    } else {\r\n      setShow(!show);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"child\">\r\n      <div onClick={ShowAndGetChild} key={data.code}>\r\n        {data.name}\r\n      </div>\r\n      {show &&\r\n        child.map((children) => (\r\n          <RenderChild\r\n            closeParent={isMainParent ? setShow : closeParent}\r\n            key={children.code}\r\n            data={children}\r\n          />\r\n        ))}\r\n    </div>\r\n  );\r\n}","function Loader() {\n  return <h1 className=\"wait\">Loaging...</h1>;\n}\n\nexport default Loader;","import React from 'react'\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div className=\"navBar\">\r\n      <a className=\"logo\" target=\"#\" href=\"!#\">Djan<span>bolotov</span></a>\r\n      <div className=\"menu\">\r\n        <a className=\"menuLink\" target=\"#\" href=\"https://github.com/djanbolotov16\">Projects</a>\r\n        <a className=\"menuLink\" target=\"#\" href=\"https://t.me/djanbolotov16\">My Telegram</a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Navbar;","import { useQuery } from \"@apollo/client\";\nimport { query } from \"./graphQL/graphQL\";\n\nimport RenderChild from \"./components/RenderChild\";\nimport Loader from \"./components/Loader\";\nimport Navbar from \"./components/NavBar\";\n\nfunction App() {\n  const { loading, data } = useQuery(query);\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  return (\n    <div>\n      <Navbar/>\n      <div className=\"container\">\n        {data.continents.map((continent) => {\n          return (\n            <RenderChild\n              isMainParent={true}\n              key={continent.code}\n              data={continent}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloClient, HttpLink, InMemoryCache, ApolloProvider } from \"@apollo/client\";\n\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst client = new ApolloClient({\n  link: new HttpLink({\n    uri: \"https://countries.trevorblades.com/\",\n  }),\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);"],"sourceRoot":""}